{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ML_webApp_12_06_220.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyMDWBJzwvXhSsicRDVHiXcz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "0cb530db9ffe44bc8638d47446275d75": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_fe806f5e67d243db99dcd0bfae0312c8",
            "_dom_classes": [],
            "description": "Processing: ",
            "_model_name": "IntProgressModel",
            "bar_style": "",
            "max": 13,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 3,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_fcd3a944727848239d3707d1b23b9599"
          }
        },
        "fe806f5e67d243db99dcd0bfae0312c8": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "fcd3a944727848239d3707d1b23b9599": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "4180973a874847c0a5a0e9f16503042a": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "TextModel",
          "state": {
            "_view_name": "TextView",
            "style": "IPY_MODEL_4045e8dea4b54b96bbb2ac676001a41e",
            "_dom_classes": [],
            "description": "",
            "_model_name": "TextModel",
            "placeholder": "â€‹",
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": "Following data types have been inferred automatically, if they are correct press enter to continue or type 'quit' otherwise.",
            "_view_count": null,
            "disabled": false,
            "_view_module_version": "1.5.0",
            "continuous_update": true,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_fe5dfe3eafd541a688946e7b0f1f26ad"
          }
        },
        "4045e8dea4b54b96bbb2ac676001a41e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "DescriptionStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "fe5dfe3eafd541a688946e7b0f1f26ad": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": "100%",
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "98f0eed863c749c0b6ab406613858d4e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_4b527db8186649989e877f9d5c9adf95",
            "_dom_classes": [],
            "description": "Processing: ",
            "_model_name": "IntProgressModel",
            "bar_style": "",
            "max": 14,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 14,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_9da408e8bbbf4186a18ce33b09d63da9"
          }
        },
        "4b527db8186649989e877f9d5c9adf95": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "9da408e8bbbf4186a18ce33b09d63da9": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "8bfec7f9d5dc497d962be32ea6b97db7": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_93ad775bfac54b56bbd29cd777a67c17",
            "_dom_classes": [],
            "description": "Processing: ",
            "_model_name": "IntProgressModel",
            "bar_style": "",
            "max": 14,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 14,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_0fec0d07796c488898238af23f852a3c"
          }
        },
        "93ad775bfac54b56bbd29cd777a67c17": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "0fec0d07796c488898238af23f852a3c": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        },
        "a3bf322b460c42b1a73b85a1d89c6dca": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "IntProgressModel",
          "state": {
            "_view_name": "ProgressView",
            "style": "IPY_MODEL_5e2ec4a938ab499885410f80a2d38de3",
            "_dom_classes": [],
            "description": "Processing: ",
            "_model_name": "IntProgressModel",
            "bar_style": "",
            "max": 5,
            "_view_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "value": 4,
            "_view_count": null,
            "_view_module_version": "1.5.0",
            "orientation": "horizontal",
            "min": 0,
            "description_tooltip": null,
            "_model_module": "@jupyter-widgets/controls",
            "layout": "IPY_MODEL_36b507e3affa4f8aa438bbdde29faef7"
          }
        },
        "5e2ec4a938ab499885410f80a2d38de3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ProgressStyleModel",
          "state": {
            "_view_name": "StyleView",
            "_model_name": "ProgressStyleModel",
            "description_width": "",
            "_view_module": "@jupyter-widgets/base",
            "_model_module_version": "1.5.0",
            "_view_count": null,
            "_view_module_version": "1.2.0",
            "bar_color": null,
            "_model_module": "@jupyter-widgets/controls"
          }
        },
        "36b507e3affa4f8aa438bbdde29faef7": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "state": {
            "_view_name": "LayoutView",
            "grid_template_rows": null,
            "right": null,
            "justify_content": null,
            "_view_module": "@jupyter-widgets/base",
            "overflow": null,
            "_model_module_version": "1.2.0",
            "_view_count": null,
            "flex_flow": null,
            "width": null,
            "min_width": null,
            "border": null,
            "align_items": null,
            "bottom": null,
            "_model_module": "@jupyter-widgets/base",
            "top": null,
            "grid_column": null,
            "overflow_y": null,
            "overflow_x": null,
            "grid_auto_flow": null,
            "grid_area": null,
            "grid_template_columns": null,
            "flex": null,
            "_model_name": "LayoutModel",
            "justify_items": null,
            "grid_row": null,
            "max_height": null,
            "align_content": null,
            "visibility": null,
            "align_self": null,
            "height": null,
            "min_height": null,
            "padding": null,
            "grid_auto_rows": null,
            "grid_gap": null,
            "max_width": null,
            "order": null,
            "_view_module_version": "1.2.0",
            "grid_template_areas": null,
            "object_position": null,
            "object_fit": null,
            "grid_auto_columns": null,
            "margin": null,
            "display": null,
            "left": null
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/2series/rockwall_analytics/blob/master/ML_webApp\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SF1umsjrzukr",
        "colab_type": "text"
      },
      "source": [
        "# 12/06/220\n",
        "\n",
        "[TDS](https://towardsdatascience.com/build-and-deploy-your-first-machine-learning-web-app-e020db344a99)\n",
        "\n",
        "\n",
        "[repo](https://github.com/pycaret/deployment-heroku/blob/master/Insurance%20-%20Model%20Training%20Notebook.ipynb)\n",
        "\n",
        "# Step 1: Model Training and Validation\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bbORJtFrmt45",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "e5de1bba-a32c-4181-d4b8-8ca09fcf5abf"
      },
      "source": [
        "!pwd # present working directory"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hr1qpW3fmy2g",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "c3b8665e-2110-43b4-dae9-cc1a32a15aec"
      },
      "source": [
        "!ls # list content in pwd"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "ML_webApp  sample_data\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rjgck6fjmyzi",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!cd ML_webApp"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rMUKHEBPmywz",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 49
        },
        "outputId": "874d44e7-4504-426c-d82b-53fff218fd68"
      },
      "source": [
        "!ls '/content/ML_webApp'"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "app.py\t\t\t ML_webApp_12_06_220.ipynb  requirements.txt  templates\n",
            "deployment_28042020.pkl  Procfile\t\t    static\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TxmmyZV5loJj",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "!pip install pycaret"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kUY67_xYzLL0",
        "colab_type": "text"
      },
      "source": [
        "### Flask\n",
        "Flask is a framework that allows you to build web applications. A web application can be a commercial website, a blog, e-commerce system, or an application that generates predictions from data provided in real-time using trained models"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EuuDJLQqzCvF",
        "colab_type": "code",
        "outputId": "3c9cc3a4-b86d-47fc-cfb4-e10c7e277cec",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 135
        }
      },
      "source": [
        "!pip install Flask"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: Flask in /usr/local/lib/python3.6/dist-packages (1.1.2)\n",
            "Requirement already satisfied: Jinja2>=2.10.1 in /usr/local/lib/python3.6/dist-packages (from Flask) (2.11.2)\n",
            "Requirement already satisfied: itsdangerous>=0.24 in /usr/local/lib/python3.6/dist-packages (from Flask) (1.1.0)\n",
            "Requirement already satisfied: click>=5.1 in /usr/local/lib/python3.6/dist-packages (from Flask) (7.1.2)\n",
            "Requirement already satisfied: Werkzeug>=0.15 in /usr/local/lib/python3.6/dist-packages (from Flask) (1.0.1)\n",
            "Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.6/dist-packages (from Jinja2>=2.10.1->Flask) (1.1.1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zMW4Po-SziR_",
        "colab_type": "text"
      },
      "source": [
        "### GitHub\n",
        "GitHub is a cloud-based service that is used to host, manage and control code. Imagine you are working in a large team where multiple people (sometime hundreds of them) are making changes\n",
        "\n",
        "### Heroku\n",
        "Heroku is a platform as a service (PaaS) that enables the deployment of web apps based on a managed container system, with integrated data services and a powerful ecosystem. In simple words, this will allow you to take the application from your local machine to the cloud so that anybody can access it using a Web URL\n",
        "\n",
        "### Why Deploy Machine Learning Models\n",
        "The deployment of ML models is the process of making models available in production where web applications, enterprise software and APIs can consume the trained model by providing new data points and generating predictions\n",
        "\n",
        "> Normally models are built so that they can be used to predict an outcome **(binary value i.e. 1 or 0 for Classification, continuous values for Regression, labels for Clustering etc.** \n",
        "\n",
        "There are 2 broad ways of generating predictions \n",
        "\n",
        "+ (i) predict by batch\n",
        "+ (ii) predict in real-time\n",
        "\n",
        "This experiment we'll deploy a machine learning model to predict in real-time\n",
        "\n",
        "### Workflow\n",
        "\n",
        "![alt text](https://drive.google.com/uc?export=view&id=1k_HUigpP_FJO7Gr7MeHlyFVjEav8DK7d)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xs8bYO7K9JM3",
        "colab_type": "text"
      },
      "source": [
        "## Business Problem\n",
        "An insurance company wants to improve its cash flow forecasting by better predicting patient charges using demographic and basic patient health risk metrics at the time of hospitalization\n",
        "\n",
        "## The Objective\n",
        "To build a web application where demographic and health information of a patient is entered in a web form to predict charges"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZO6QC4VJzaA3",
        "colab_type": "code",
        "outputId": "c1388d1d-10b0-4bfd-f77d-529f846b086b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 189
        }
      },
      "source": [
        "# GET DATA\n",
        "from pycaret.datasets import get_data\n",
        "data = get_data('insurance')"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>female</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>southwest</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>male</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>male</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>male</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>male</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   age     sex     bmi  children smoker     region      charges\n",
              "0   19  female  27.900         0    yes  southwest  16884.92400\n",
              "1   18    male  33.770         1     no  southeast   1725.55230\n",
              "2   28    male  33.000         3     no  southeast   4449.46200\n",
              "3   33    male  22.705         0     no  northwest  21984.47061\n",
              "4   32    male  28.880         0     no  northwest   3866.85520"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0bg_QX7S3lbK",
        "colab_type": "code",
        "outputId": "dd77b2a1-cb23-401b-b251-f32a7b3106a0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        }
      },
      "source": [
        "data.shape"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1338, 7)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BFcBjkSZ3BMf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# EXPERIMENT 1\n",
        "# PERFORMED WITH DEFAULT PRE-PROCESSING SETTINGS\n",
        "from pycaret.regression import *"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_agAaZr03SBf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 825,
          "referenced_widgets": [
            "0cb530db9ffe44bc8638d47446275d75",
            "fe806f5e67d243db99dcd0bfae0312c8",
            "fcd3a944727848239d3707d1b23b9599",
            "4180973a874847c0a5a0e9f16503042a",
            "4045e8dea4b54b96bbb2ac676001a41e",
            "fe5dfe3eafd541a688946e7b0f1f26ad"
          ]
        },
        "outputId": "12e6b02a-0b53-4ea0-86f5-3aa9b61f83d5"
      },
      "source": [
        "s = setup(data, target='charges', session_id=123)"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " \n",
            "Setup Succesfully Completed!\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<style  type=\"text/css\" >\n",
              "</style><table id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002\" ><thead>    <tr>        <th class=\"blank level0\" ></th>        <th class=\"col_heading level0 col0\" >Description</th>        <th class=\"col_heading level0 col1\" >Value</th>    </tr></thead><tbody>\n",
              "                <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row0\" class=\"row_heading level0 row0\" >0</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row0_col0\" class=\"data row0 col0\" >session_id</td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row0_col1\" class=\"data row0 col1\" >123</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row1\" class=\"row_heading level0 row1\" >1</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row1_col0\" class=\"data row1 col0\" >Transform Target </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row1_col1\" class=\"data row1 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row2\" class=\"row_heading level0 row2\" >2</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row2_col0\" class=\"data row2 col0\" >Transform Target Method</td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row2_col1\" class=\"data row2 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row3\" class=\"row_heading level0 row3\" >3</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row3_col0\" class=\"data row3 col0\" >Original Data</td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row3_col1\" class=\"data row3 col1\" >(1338, 7)</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row4\" class=\"row_heading level0 row4\" >4</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row4_col0\" class=\"data row4 col0\" >Missing Values </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row4_col1\" class=\"data row4 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row5\" class=\"row_heading level0 row5\" >5</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row5_col0\" class=\"data row5 col0\" >Numeric Features </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row5_col1\" class=\"data row5 col1\" >2</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row6\" class=\"row_heading level0 row6\" >6</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row6_col0\" class=\"data row6 col0\" >Categorical Features </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row6_col1\" class=\"data row6 col1\" >4</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row7\" class=\"row_heading level0 row7\" >7</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row7_col0\" class=\"data row7 col0\" >Ordinal Features </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row7_col1\" class=\"data row7 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row8\" class=\"row_heading level0 row8\" >8</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row8_col0\" class=\"data row8 col0\" >High Cardinality Features </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row8_col1\" class=\"data row8 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row9\" class=\"row_heading level0 row9\" >9</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row9_col0\" class=\"data row9 col0\" >High Cardinality Method </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row9_col1\" class=\"data row9 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row10\" class=\"row_heading level0 row10\" >10</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row10_col0\" class=\"data row10 col0\" >Sampled Data</td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row10_col1\" class=\"data row10 col1\" >(1338, 7)</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row11\" class=\"row_heading level0 row11\" >11</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row11_col0\" class=\"data row11 col0\" >Transformed Train Set</td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row11_col1\" class=\"data row11 col1\" >(936, 14)</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row12\" class=\"row_heading level0 row12\" >12</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row12_col0\" class=\"data row12 col0\" >Transformed Test Set</td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row12_col1\" class=\"data row12 col1\" >(402, 14)</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row13\" class=\"row_heading level0 row13\" >13</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row13_col0\" class=\"data row13 col0\" >Numeric Imputer </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row13_col1\" class=\"data row13 col1\" >mean</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row14\" class=\"row_heading level0 row14\" >14</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row14_col0\" class=\"data row14 col0\" >Categorical Imputer </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row14_col1\" class=\"data row14 col1\" >constant</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row15\" class=\"row_heading level0 row15\" >15</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row15_col0\" class=\"data row15 col0\" >Normalize </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row15_col1\" class=\"data row15 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row16\" class=\"row_heading level0 row16\" >16</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row16_col0\" class=\"data row16 col0\" >Normalize Method </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row16_col1\" class=\"data row16 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row17\" class=\"row_heading level0 row17\" >17</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row17_col0\" class=\"data row17 col0\" >Transformation </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row17_col1\" class=\"data row17 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row18\" class=\"row_heading level0 row18\" >18</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row18_col0\" class=\"data row18 col0\" >Transformation Method </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row18_col1\" class=\"data row18 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row19\" class=\"row_heading level0 row19\" >19</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row19_col0\" class=\"data row19 col0\" >PCA </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row19_col1\" class=\"data row19 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row20\" class=\"row_heading level0 row20\" >20</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row20_col0\" class=\"data row20 col0\" >PCA Method </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row20_col1\" class=\"data row20 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row21\" class=\"row_heading level0 row21\" >21</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row21_col0\" class=\"data row21 col0\" >PCA Components </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row21_col1\" class=\"data row21 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row22\" class=\"row_heading level0 row22\" >22</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row22_col0\" class=\"data row22 col0\" >Ignore Low Variance </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row22_col1\" class=\"data row22 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row23\" class=\"row_heading level0 row23\" >23</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row23_col0\" class=\"data row23 col0\" >Combine Rare Levels </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row23_col1\" class=\"data row23 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row24\" class=\"row_heading level0 row24\" >24</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row24_col0\" class=\"data row24 col0\" >Rare Level Threshold </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row24_col1\" class=\"data row24 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row25\" class=\"row_heading level0 row25\" >25</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row25_col0\" class=\"data row25 col0\" >Numeric Binning </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row25_col1\" class=\"data row25 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row26\" class=\"row_heading level0 row26\" >26</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row26_col0\" class=\"data row26 col0\" >Remove Outliers </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row26_col1\" class=\"data row26 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row27\" class=\"row_heading level0 row27\" >27</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row27_col0\" class=\"data row27 col0\" >Outliers Threshold </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row27_col1\" class=\"data row27 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row28\" class=\"row_heading level0 row28\" >28</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row28_col0\" class=\"data row28 col0\" >Remove Multicollinearity </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row28_col1\" class=\"data row28 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row29\" class=\"row_heading level0 row29\" >29</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row29_col0\" class=\"data row29 col0\" >Multicollinearity Threshold </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row29_col1\" class=\"data row29 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row30\" class=\"row_heading level0 row30\" >30</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row30_col0\" class=\"data row30 col0\" >Clustering </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row30_col1\" class=\"data row30 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row31\" class=\"row_heading level0 row31\" >31</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row31_col0\" class=\"data row31 col0\" >Clustering Iteration </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row31_col1\" class=\"data row31 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row32\" class=\"row_heading level0 row32\" >32</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row32_col0\" class=\"data row32 col0\" >Polynomial Features </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row32_col1\" class=\"data row32 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row33\" class=\"row_heading level0 row33\" >33</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row33_col0\" class=\"data row33 col0\" >Polynomial Degree </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row33_col1\" class=\"data row33 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row34\" class=\"row_heading level0 row34\" >34</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row34_col0\" class=\"data row34 col0\" >Trignometry Features </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row34_col1\" class=\"data row34 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row35\" class=\"row_heading level0 row35\" >35</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row35_col0\" class=\"data row35 col0\" >Polynomial Threshold </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row35_col1\" class=\"data row35 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row36\" class=\"row_heading level0 row36\" >36</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row36_col0\" class=\"data row36 col0\" >Group Features </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row36_col1\" class=\"data row36 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row37\" class=\"row_heading level0 row37\" >37</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row37_col0\" class=\"data row37 col0\" >Feature Selection </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row37_col1\" class=\"data row37 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row38\" class=\"row_heading level0 row38\" >38</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row38_col0\" class=\"data row38 col0\" >Features Selection Threshold </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row38_col1\" class=\"data row38 col1\" >None</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row39\" class=\"row_heading level0 row39\" >39</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row39_col0\" class=\"data row39 col0\" >Feature Interaction </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row39_col1\" class=\"data row39 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row40\" class=\"row_heading level0 row40\" >40</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row40_col0\" class=\"data row40 col0\" >Feature Ratio </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row40_col1\" class=\"data row40 col1\" >False</td>\n",
              "            </tr>\n",
              "            <tr>\n",
              "                        <th id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002level0_row41\" class=\"row_heading level0 row41\" >41</th>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row41_col0\" class=\"data row41 col0\" >Interaction Threshold </td>\n",
              "                        <td id=\"T_a1e37530_acaf_11ea_b487_0242ac1c0002row41_col1\" class=\"data row41 col1\" >None</td>\n",
              "            </tr>\n",
              "    </tbody></table>"
            ],
            "text/plain": [
              "<pandas.io.formats.style.Styler at 0x7f8af0700a90>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "swSh53ZE3e1d",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388,
          "referenced_widgets": [
            "98f0eed863c749c0b6ab406613858d4e",
            "4b527db8186649989e877f9d5c9adf95",
            "9da408e8bbbf4186a18ce33b09d63da9"
          ]
        },
        "outputId": "bfd23ab9-22e0-49d8-ee51-83d7b18805a1"
      },
      "source": [
        "# MODEL TRAINING AND VALIDATION\n",
        "lr = create_model('lr')"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MAE</th>\n",
              "      <th>MSE</th>\n",
              "      <th>RMSE</th>\n",
              "      <th>R2</th>\n",
              "      <th>RMSLE</th>\n",
              "      <th>MAPE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4165.9659</td>\n",
              "      <td>3.330203e+07</td>\n",
              "      <td>5770.7909</td>\n",
              "      <td>0.8011</td>\n",
              "      <td>0.4683</td>\n",
              "      <td>0.4153</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4503.7366</td>\n",
              "      <td>4.374648e+07</td>\n",
              "      <td>6614.1122</td>\n",
              "      <td>0.7456</td>\n",
              "      <td>0.5633</td>\n",
              "      <td>0.4217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3880.5528</td>\n",
              "      <td>3.179514e+07</td>\n",
              "      <td>5638.7179</td>\n",
              "      <td>0.5974</td>\n",
              "      <td>0.7645</td>\n",
              "      <td>0.4396</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3747.6457</td>\n",
              "      <td>2.680530e+07</td>\n",
              "      <td>5177.3833</td>\n",
              "      <td>0.7762</td>\n",
              "      <td>0.5015</td>\n",
              "      <td>0.5175</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4471.0419</td>\n",
              "      <td>4.341053e+07</td>\n",
              "      <td>6588.6670</td>\n",
              "      <td>0.6771</td>\n",
              "      <td>0.5224</td>\n",
              "      <td>0.3767</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>4182.7551</td>\n",
              "      <td>3.616633e+07</td>\n",
              "      <td>6013.8450</td>\n",
              "      <td>0.7674</td>\n",
              "      <td>0.7416</td>\n",
              "      <td>0.4320</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>4081.1022</td>\n",
              "      <td>3.919259e+07</td>\n",
              "      <td>6260.3984</td>\n",
              "      <td>0.7333</td>\n",
              "      <td>0.6434</td>\n",
              "      <td>0.4241</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>4928.1534</td>\n",
              "      <td>4.641504e+07</td>\n",
              "      <td>6812.8581</td>\n",
              "      <td>0.7448</td>\n",
              "      <td>0.5887</td>\n",
              "      <td>0.4137</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>4609.3147</td>\n",
              "      <td>4.037035e+07</td>\n",
              "      <td>6353.7670</td>\n",
              "      <td>0.7392</td>\n",
              "      <td>0.5686</td>\n",
              "      <td>0.5111</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>4665.8647</td>\n",
              "      <td>4.259679e+07</td>\n",
              "      <td>6526.6220</td>\n",
              "      <td>0.7256</td>\n",
              "      <td>0.8131</td>\n",
              "      <td>0.4802</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mean</th>\n",
              "      <td>4323.6133</td>\n",
              "      <td>3.838006e+07</td>\n",
              "      <td>6175.7162</td>\n",
              "      <td>0.7308</td>\n",
              "      <td>0.6175</td>\n",
              "      <td>0.4432</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SD</th>\n",
              "      <td>353.5472</td>\n",
              "      <td>5.908389e+06</td>\n",
              "      <td>490.4977</td>\n",
              "      <td>0.0543</td>\n",
              "      <td>0.1126</td>\n",
              "      <td>0.0431</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            MAE           MSE       RMSE      R2   RMSLE    MAPE\n",
              "0     4165.9659  3.330203e+07  5770.7909  0.8011  0.4683  0.4153\n",
              "1     4503.7366  4.374648e+07  6614.1122  0.7456  0.5633  0.4217\n",
              "2     3880.5528  3.179514e+07  5638.7179  0.5974  0.7645  0.4396\n",
              "3     3747.6457  2.680530e+07  5177.3833  0.7762  0.5015  0.5175\n",
              "4     4471.0419  4.341053e+07  6588.6670  0.6771  0.5224  0.3767\n",
              "5     4182.7551  3.616633e+07  6013.8450  0.7674  0.7416  0.4320\n",
              "6     4081.1022  3.919259e+07  6260.3984  0.7333  0.6434  0.4241\n",
              "7     4928.1534  4.641504e+07  6812.8581  0.7448  0.5887  0.4137\n",
              "8     4609.3147  4.037035e+07  6353.7670  0.7392  0.5686  0.5111\n",
              "9     4665.8647  4.259679e+07  6526.6220  0.7256  0.8131  0.4802\n",
              "Mean  4323.6133  3.838006e+07  6175.7162  0.7308  0.6175  0.4432\n",
              "SD     353.5472  5.908389e+06   490.4977  0.0543  0.1126  0.0431"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bweycYwQ_pBv",
        "colab_type": "text"
      },
      "source": [
        "Notice the impact of transformations and automatic feature engineering. The R2 has increased by 10% with very little effort. We can compare the residual plot from our linear regression model for both experiments and observe the impact of transformations and feature engineering on the heteroskedasticity of model"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mS4s59ma31Sg",
        "colab_type": "code",
        "outputId": "3f1e6325-5a2f-4a61-ef48-913edfaae0cd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 375
        }
      },
      "source": [
        "# PLOT TRAINED MODEL\n",
        "plot_model(lr)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x396 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "td_fbEA84CBb",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# EXPERIMENT 2\n",
        "# ADDITIONAL PRE-PROCESSING\n",
        "s2 = setup(data, target='charges', session_id=123,\n",
        "      normalize=True,\n",
        "      polynomial_features=True, # automatic FE\n",
        "      trigonometry_features=True, # automatic FE\n",
        "      feature_interaction=True, # automatic FE\n",
        "      bin_numeric_features=['age', 'bmi']) # binning continuous data into intervals"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SZ3RmJ_95CuS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "s2[0].columns"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bI73I7Y95qLr",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 388,
          "referenced_widgets": [
            "8bfec7f9d5dc497d962be32ea6b97db7",
            "93ad775bfac54b56bbd29cd777a67c17",
            "0fec0d07796c488898238af23f852a3c"
          ]
        },
        "outputId": "470e21a7-1d3e-4918-cec8-914f2e194e2b"
      },
      "source": [
        "lr = create_model('lr')"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>MAE</th>\n",
              "      <th>MSE</th>\n",
              "      <th>RMSE</th>\n",
              "      <th>R2</th>\n",
              "      <th>RMSLE</th>\n",
              "      <th>MAPE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3000.0131</td>\n",
              "      <td>2.110608e+07</td>\n",
              "      <td>4594.1352</td>\n",
              "      <td>0.8739</td>\n",
              "      <td>0.4181</td>\n",
              "      <td>0.3491</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3586.1493</td>\n",
              "      <td>3.359858e+07</td>\n",
              "      <td>5796.4284</td>\n",
              "      <td>0.8046</td>\n",
              "      <td>0.4490</td>\n",
              "      <td>0.3462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3105.6488</td>\n",
              "      <td>2.406238e+07</td>\n",
              "      <td>4905.3416</td>\n",
              "      <td>0.6953</td>\n",
              "      <td>0.6108</td>\n",
              "      <td>0.4103</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3263.3963</td>\n",
              "      <td>2.759360e+07</td>\n",
              "      <td>5252.9609</td>\n",
              "      <td>0.7696</td>\n",
              "      <td>0.5608</td>\n",
              "      <td>0.4823</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3313.2530</td>\n",
              "      <td>2.882964e+07</td>\n",
              "      <td>5369.3240</td>\n",
              "      <td>0.7856</td>\n",
              "      <td>0.4725</td>\n",
              "      <td>0.3079</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>3247.9977</td>\n",
              "      <td>2.377222e+07</td>\n",
              "      <td>4875.6767</td>\n",
              "      <td>0.8471</td>\n",
              "      <td>0.4124</td>\n",
              "      <td>0.3141</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2990.6682</td>\n",
              "      <td>2.602808e+07</td>\n",
              "      <td>5101.7719</td>\n",
              "      <td>0.8229</td>\n",
              "      <td>0.3933</td>\n",
              "      <td>0.3239</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>3503.5476</td>\n",
              "      <td>3.123774e+07</td>\n",
              "      <td>5589.0729</td>\n",
              "      <td>0.8282</td>\n",
              "      <td>0.5307</td>\n",
              "      <td>0.3069</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>3150.6456</td>\n",
              "      <td>2.265280e+07</td>\n",
              "      <td>4759.4963</td>\n",
              "      <td>0.8537</td>\n",
              "      <td>0.4016</td>\n",
              "      <td>0.3417</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>3301.3059</td>\n",
              "      <td>2.931560e+07</td>\n",
              "      <td>5414.3881</td>\n",
              "      <td>0.8112</td>\n",
              "      <td>0.5233</td>\n",
              "      <td>0.3740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Mean</th>\n",
              "      <td>3246.2626</td>\n",
              "      <td>2.681967e+07</td>\n",
              "      <td>5165.8596</td>\n",
              "      <td>0.8092</td>\n",
              "      <td>0.4773</td>\n",
              "      <td>0.3556</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>SD</th>\n",
              "      <td>185.5842</td>\n",
              "      <td>3.792963e+06</td>\n",
              "      <td>365.4669</td>\n",
              "      <td>0.0482</td>\n",
              "      <td>0.0715</td>\n",
              "      <td>0.0520</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            MAE           MSE       RMSE      R2   RMSLE    MAPE\n",
              "0     3000.0131  2.110608e+07  4594.1352  0.8739  0.4181  0.3491\n",
              "1     3586.1493  3.359858e+07  5796.4284  0.8046  0.4490  0.3462\n",
              "2     3105.6488  2.406238e+07  4905.3416  0.6953  0.6108  0.4103\n",
              "3     3263.3963  2.759360e+07  5252.9609  0.7696  0.5608  0.4823\n",
              "4     3313.2530  2.882964e+07  5369.3240  0.7856  0.4725  0.3079\n",
              "5     3247.9977  2.377222e+07  4875.6767  0.8471  0.4124  0.3141\n",
              "6     2990.6682  2.602808e+07  5101.7719  0.8229  0.3933  0.3239\n",
              "7     3503.5476  3.123774e+07  5589.0729  0.8282  0.5307  0.3069\n",
              "8     3150.6456  2.265280e+07  4759.4963  0.8537  0.4016  0.3417\n",
              "9     3301.3059  2.931560e+07  5414.3881  0.8112  0.5233  0.3740\n",
              "Mean  3246.2626  2.681967e+07  5165.8596  0.8092  0.4773  0.3556\n",
              "SD     185.5842  3.792963e+06   365.4669  0.0482  0.0715  0.0520"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CHG_ABmP5_lK",
        "colab_type": "code",
        "outputId": "ed52c747-aa82-43b7-b388-52fa576fade0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 375,
          "referenced_widgets": [
            "a3bf322b460c42b1a73b85a1d89c6dca",
            "5e2ec4a938ab499885410f80a2d38de3",
            "36b507e3affa4f8aa438bbdde29faef7"
          ]
        }
      },
      "source": [
        "# PLOT TRAINED MODEL\n",
        "plot_model(lr)"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 576x396 with 2 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sfSy6aq6A6np",
        "colab_type": "text"
      },
      "source": [
        "ML is an iterative process. A Number of iterations and techniques are used depending on how critical the task/problem is and what the impact will be if predictions are wrong. The severity and impact of a model to predict a patient outcome in real-time in the ICU of a hospital is far more than a model built to predict customer churn\n",
        "\n",
        "In this experiment, we have performed only 2 iterations and the linear regression model from the 2nd experiment will be used for deployment\n",
        "\n",
        "> At this stage, however, the model is still only an object within our notebook. To save it as a file that can be transferred to and consumed by other applications, run the following code"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-K8fZs226R02",
        "colab_type": "code",
        "outputId": "fcf2e7d5-00ea-4013-9bed-88d870078804",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        }
      },
      "source": [
        "# SAVE TRANSFORMATION PIPELINE AND MODEL\n",
        "save_model(lr, 'ML_webApp/deployment_28042020')"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Transformation Pipeline and Model Succesfully Saved\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cC3ZDznM6nGU",
        "colab_type": "code",
        "outputId": "f392b7b5-372d-459c-abbd-2b4772ee9ea7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        }
      },
      "source": [
        "# PREVIEW THE PIPELINE AND MODEL STORED IN VARIABLE\n",
        "deployment_28042020 = load_model('ML_webApp/deployment_28042020')"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Transformation Pipeline and Model Sucessfully Loaded\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "amU4mDcO6za-",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "deployment_28042020"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PJCZVx2i61wH",
        "colab_type": "code",
        "outputId": "2187fbe9-39e1-49f7-fea5-169d0ab17e90",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        }
      },
      "source": [
        "import requests\n",
        "\n",
        "url = 'https://pycaret-insurance.herokuapp.com/predict_api'\n",
        "pred = requests.post(url, json={'age':55, 'sex':'male', 'bmi':59, 'children':1, 'smoker':'male', 'region':'northwest'})\n",
        "print(pred.json())\n"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "75714.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "le7GGsrEC_Ls",
        "colab_type": "text"
      },
      "source": [
        "# Step 2: Build Web App\n",
        "This will connect to and generate predictions on new data in real-time\n",
        "\n",
        "2 parts to this application\n",
        "\n",
        "+ (i) front-end designed using HTML\n",
        "+ (ii) back-end developed using Flask\n",
        "\n",
        "## Front-end of Web Application\n",
        "Generally, the front-end of web applications are built using HTML which is not the focus of this experiment. We have used a simple HTML template and a CSS style sheet to design an input form\n",
        "\n",
        "You donâ€™t need to be an expert in HTML to build simple applications. There are numerous free platforms that provide HTML and CSS templates as well as enable building beautiful HTML pages quickly by using a drag and drop interface\n",
        "\n",
        "### CSS Style Sheet\n",
        "CSS (also known as Cascading Style Sheets) describes how HTML elements are displayed on a screen. It's an efficient way of controlling the layout of your application. Style sheets contain information such as\n",
        " \n",
        "+ background color\n",
        "+ font size\n",
        "+ and color \n",
        "+ margins etc. \n",
        "\n",
        "They are saved externally as a .css file and is linked to HTML but including 1 line of code"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1MHc8Dqfi0gB",
        "colab_type": "text"
      },
      "source": [
        "```\n",
        "# style.css\n",
        "@import url(https://fonts.googleapis.com/css?family=Open+Sans);\n",
        ".btn { display: inline-block; *display: inline; *zoom: 1; padding: 4px 10px 4px; margin-bottom: 0; font-size: 13px; line-height: 18px; color: #333333; text-align: center;text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75); vertical-align: middle; background-color: #f5f5f5; background-image: -moz-linear-gradient(top, #ffffff, #e6e6e6); background-image: -ms-linear-gradient(top, #ffffff, #e6e6e6); background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#ffffff), to(#e6e6e6)); background-image: -webkit-linear-gradient(top, #ffffff, #e6e6e6); background-image: -o-linear-gradient(top, #ffffff, #e6e6e6); background-image: linear-gradient(top, #ffffff, #e6e6e6); background-repeat: repeat-x; filter: progid:dximagetransform.microsoft.gradient(startColorstr=#ffffff, endColorstr=#e6e6e6, GradientType=0); border-color: #e6e6e6 #e6e6e6 #e6e6e6; border-color: rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.1) rgba(0, 0, 0, 0.25); border: 1px solid #e6e6e6; -webkit-border-radius: 4px; -moz-border-radius: 4px; border-radius: 4px; -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05); -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05); box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05); cursor: pointer; *margin-left: .3em; }\n",
        ".btn:hover, .btn:active, .btn.active, .btn.disabled, .btn[disabled] { background-color: #e6e6e6; }\n",
        ".btn-large { padding: 9px 14px; font-size: 15px; line-height: normal; -webkit-border-radius: 5px; -moz-border-radius: 5px; border-radius: 5px; }\n",
        ".btn:hover { color: #333333; text-decoration: none; background-color: #e6e6e6; background-position: 0 -15px; -webkit-transition: background-position 0.1s linear; -moz-transition: background-position 0.1s linear; -ms-transition: background-position 0.1s linear; -o-transition: background-position 0.1s linear; transition: background-position 0.1s linear; }\n",
        ".btn-primary, .btn-primary:hover { text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.25); color: #ffffff; }\n",
        ".btn-primary.active { color: rgba(255, 255, 255, 0.75); }\n",
        ".btn-primary { background-color: #4a77d4; background-image: -moz-linear-gradient(top, #6eb6de, #4a77d4); background-image: -ms-linear-gradient(top, #6eb6de, #4a77d4); background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#6eb6de), to(#4a77d4)); background-image: -webkit-linear-gradient(top, #6eb6de, #4a77d4); background-image: -o-linear-gradient(top, #6eb6de, #4a77d4); background-image: linear-gradient(top, #6eb6de, #4a77d4); background-repeat: repeat-x; filter: progid:dximagetransform.microsoft.gradient(startColorstr=#6eb6de, endColorstr=#4a77d4, GradientType=0);  border: 1px solid #3762bc; text-shadow: 1px 1px 1px rgba(0,0,0,0.4); box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.5); }\n",
        ".btn-primary:hover, .btn-primary:active, .btn-primary.active, .btn-primary.disabled, .btn-primary[disabled] { filter: none; background-color: #4a77d4; }\n",
        ".btn-block { width: 100%; display:block; }\n",
        "\n",
        "* { -webkit-box-sizing:border-box; -moz-box-sizing:border-box; -ms-box-sizing:border-box; -o-box-sizing:border-box; box-sizing:border-box; }\n",
        "\n",
        "html { width: 100%; height:100%; overflow:hidden; }\n",
        "\n",
        "body { \n",
        "\twidth: 100%;\n",
        "\theight:100%;\n",
        "\tfont-family: 'Open Sans', sans-serif;\n",
        "\tbackground: #092756;\n",
        "\tcolor: #fff;\n",
        "\tfont-size: 18px;\n",
        "\ttext-align:center;\n",
        "\tletter-spacing:1.2px;\n",
        "\tbackground: -moz-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%),-moz-linear-gradient(top,  rgba(57,173,219,.25) 0%, rgba(42,60,87,.4) 100%), -moz-linear-gradient(-45deg,  #670d10 0%, #092756 100%);\n",
        "\tbackground: -webkit-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%), -webkit-linear-gradient(top,  rgba(57,173,219,.25) 0%,rgba(42,60,87,.4) 100%), -webkit-linear-gradient(-45deg,  #670d10 0%,#092756 100%);\n",
        "\tbackground: -o-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%), -o-linear-gradient(top,  rgba(57,173,219,.25) 0%,rgba(42,60,87,.4) 100%), -o-linear-gradient(-45deg,  #670d10 0%,#092756 100%);\n",
        "\tbackground: -ms-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%), -ms-linear-gradient(top,  rgba(57,173,219,.25) 0%,rgba(42,60,87,.4) 100%), -ms-linear-gradient(-45deg,  #670d10 0%,#092756 100%);\n",
        "\tbackground: -webkit-radial-gradient(0% 100%, ellipse cover, rgba(104,128,138,.4) 10%,rgba(138,114,76,0) 40%), linear-gradient(to bottom,  rgba(57,173,219,.25) 0%,rgba(42,60,87,.4) 100%), linear-gradient(135deg,  #670d10 0%,#092756 100%);\n",
        "\tfilter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#3E1D6D', endColorstr='#092756',GradientType=1 );\n",
        "\n",
        "}\n",
        ".login { \n",
        "\tposition: absolute;\n",
        "\ttop: 40%;\n",
        "\tleft: 50%;\n",
        "\tmargin: -150px 0 0 -150px;\n",
        "\twidth:400px;\n",
        "\theight:400px;\n",
        "}\n",
        "\n",
        ".login h1 { color: #fff; text-shadow: 0 0 10px rgba(0,0,0,0.3); letter-spacing:1px; text-align:center; }\n",
        "\n",
        "input { \n",
        "\twidth: 100%; \n",
        "\tmargin-bottom: 10px; \n",
        "\tbackground: rgba(0,0,0,0.3);\n",
        "\tborder: none;\n",
        "\toutline: none;\n",
        "\tpadding: 10px;\n",
        "\tfont-size: 13px;\n",
        "\tcolor: #fff;\n",
        "\ttext-shadow: 1px 1px 1px rgba(0,0,0,0.3);\n",
        "\tborder: 1px solid rgba(0,0,0,0.3);\n",
        "\tborder-radius: 4px;\n",
        "\tbox-shadow: inset 0 -5px 45px rgba(100,100,100,0.2), 0 1px 1px rgba(255,255,255,0.2);\n",
        "\t-webkit-transition: box-shadow .5s ease;\n",
        "\t-moz-transition: box-shadow .5s ease;\n",
        "\t-o-transition: box-shadow .5s ease;\n",
        "\t-ms-transition: box-shadow .5s ease;\n",
        "\ttransition: box-shadow .5s ease;\n",
        "}\n",
        "input:focus { box-shadow: inset 0 -5px 45px rgba(100,100,100,0.4), 0 1px 1px rgba(255,255,255,0.2); }\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DVI8_-mLi-9P",
        "colab_type": "text"
      },
      "source": [
        "```\n",
        "# home.html\n",
        "<!DOCTYPE html>\n",
        "<html>\n",
        "<head>\n",
        "  <meta charset=\"UTF-8\">\n",
        "  <title>Predict Insurance Bill</title>\n",
        "  <link href='https://fonts.googleapis.com/css?family=Pacifico' rel='stylesheet' type='text/css'>\n",
        "<link href='https://fonts.googleapis.com/css?family=Arimo' rel='stylesheet' type='text/css'>\n",
        "<link href='https://fonts.googleapis.com/css?family=Hind:300' rel='stylesheet' type='text/css'>\n",
        "<link href='https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300' rel='stylesheet' type='text/css'>\n",
        "<link type=\"text/css\" rel=\"stylesheet\" href=\"{{ url_for('static', filename='./style.css') }}\"> # link to css style sheet\n",
        "  \n",
        "</head>\n",
        "\n",
        "<body>\n",
        " <div class=\"login\">\n",
        "\t<h1>Predict Insurance Bill</h1>\n",
        "\n",
        "     <!-- Form to enter new data for predictions  --> # update fields for input form here\n",
        "    <form action=\"{{ url_for('predict')}}\"method=\"POST\">\n",
        "      <input type=\"text\" name=\"age\" placeholder=\"Age\" required=\"required\" /><br>\n",
        "    \t<input type=\"text\" name=\"sex\" placeholder=\"Sex\" required=\"required\" /><br>\n",
        "        <input type=\"text\" name=\"bmi\" placeholder=\"BMI\" required=\"required\" /><br>\n",
        "        <input type=\"text\" name=\"children\" placeholder=\"Children\" required=\"required\" /><br>\n",
        "        <input type=\"text\" name=\"smoker\" placeholder=\"Smoker\" required=\"required\" /><br>\n",
        "        <input type=\"text\" name=\"region\" placeholder=\"Region\" required=\"required\" /><br>\n",
        "\n",
        "        <button type=\"submit\" class=\"btn btn-primary btn-block btn-large\">Predict</button>\n",
        "    </form>\n",
        "\n",
        "   <br>\n",
        "   <br>\n",
        "  \n",
        "   \n",
        " </div>\n",
        " {{pred}}\n",
        "\n",
        "</body>\n",
        "</html>\n",
        "```"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WTv4GHkvebcO",
        "colab_type": "text"
      },
      "source": [
        "## Back-end of Web Application\n",
        "The back-end of a web application is developed using a Flask framework. For beginnerâ€™s it is intuitive to consider Flask as a library that you can import just like any other library in Python\n",
        "\n",
        "If you remember from the Step 1 above we have finalized linear regression model that was trained on 60 features that were automatically engineered by PyCaret. However, the front-end of our web app has an input form that collects only the 6 features i.e. age, sex, bmi, children, smoker, region\n",
        "\n",
        "How do we transform 6 features of a new data point in real-time into 60 features on which model was trained? With a sequence of transformations applied during model training, coding becomes increasingly complex and time-taking task\n",
        "\n",
        "> Using PyCaret all transformations such as categorical encoding, scaling, missing value imputation, feature engineering and even feature selection are automatically executed in real-time before generating predictions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HworU19-jKpm",
        "colab_type": "text"
      },
      "source": [
        "```\n",
        "# build app\n",
        "from flask import Flask,request, url_for, redirect, render_template, jsonify\n",
        "from pycaret.regression import *\n",
        "import pandas as pd\n",
        "import pickle\n",
        "import numpy as np\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "model = load_model('deployment_28042020') # loading transformation pipeline and trained model\n",
        "cols = ['age', 'sex', 'bmi', 'children', 'smoker', 'region']\n",
        "\n",
        "@app.route('/')\n",
        "def home():\n",
        "    return render_template(\"home.html\")\n",
        "\n",
        "@app.route('/predict',methods=['POST'])\n",
        "def predict():\n",
        "    int_features = [x for x in request.form.values()]\n",
        "    final = np.array(int_features)\n",
        "    data_unseen = pd.DataFrame([final], columns = cols)\n",
        "    prediction = predict_model(model, data=data_unseen, round = 0) # this is where the MAGIC happens. predict_model() of pycaret applies the entire ML pipeline sequentially and generates predictions using TRAINED\n",
        "    prediction = int(prediction.Label[0])\n",
        "    return render_template('home.html',pred='Expected Bill will be {}'.format(prediction))\n",
        "\n",
        "@app.route('/predict_api',methods=['POST'])\n",
        "def predict_api():\n",
        "    data = request.get_json(force=True)\n",
        "    data_unseen = pd.DataFrame([data])\n",
        "    prediction = predict_model(model, data=data_unseen)\n",
        "    output = prediction.Label[0]\n",
        "    return jsonify(output)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(debug=True)\n",
        "```"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-haxqXuojY4Y",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 33
        },
        "outputId": "90ce8d5a-2a5d-47d1-b2b4-a1b43b619486"
      },
      "source": [
        "!app.py"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/bin/bash: app.py: command not found\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oe_mIlDItr-B",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}